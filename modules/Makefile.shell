#################################################
# User variables				#
#						#
# You should adapt these variables to your	#
# projects needs.				#
#						#
# Those variables can also be overridden on the	#
# command line in order to adjust some build	#
# settings.					#
#################################################

TARGET = iknowshell

VER_MAJOR = 2
VER_MINOR = 3
VER_UPDATE = 0

TARGET_SYSTEM = native
#TARGET_SYSTEM = i686
#TARGET_SYSTEM = x86_64

#BUILD_TYPE = release
BUILD_TYPE = debug

#LINK_TYPE = c
LINK_TYPE = c++

# DO NOT ALTER THIS VARIABLE
OUTPUT_DIR = $(BUILD_TYPE)/$(TARGET_SYSTEM)

SOURCE_DIRS = shell/src shell/src/SDK
IGNORE_FILES = shell/src/SDK/main.cpp

# Will be prefixed with /usr/include/ for native builds
# and with [path-to-toochain]/include/ for other builds
TARGET_INC_PATH = boost-1_33_1
INC_PATH = base/src/headers core/src/headers shell/src shell/src/include shell/src/SDK/headers ../CryptoDll

# Will be prefixed with /usr/lib/ for native builds
# and with [path-to-toolchain]/lib/ for other builds
TARGET_LIB_PATH =
LIB_PATH = $(OUTPUT_DIR) ../CryptoDll/$(OUTPUT_DIR)

# Will be prefixed with /usr/lib/ for native builds
# and with [path-to-toolchain]/lib/ for other builds
TARGET_STATIC_LIBS =
STATIC_LIBS =
SHARED_LIBS = iknowbase iknowcore iknowcryptodll

EXTRA_CFLAGS = 
EXTRA_LIBS = 

MACROS =

#################################################
# Build settings				#
# 						#
# These variables contain the various settings	#
# needed to perform the requested build.	#
#						#
# These are created automatically, do NOT	#
# change these settings.			#
#################################################

CC_PREFIX =
CC_TOOLS_PREFIX =
CC_INC_DIR = /usr/include
CC_LIB_DIR = /usr/lib
CC_EXTRA_LIB_DIR =

LD_PARAM =
CC_PARAM =

ifeq ($(TARGET_SYSTEM),i686)
	CC_PREFIX = /opt/crosstool/gcc-4.1.0-glibc-2.3.6/i686-unknown-linux-gnu
	CC_TOOLS_PREFIX = $(CC_PREFIX)/bin/i686-unknown-linux-gnu-
	CC_INC_DIR = $(CC_PREFIX)/include
	CC_LIB_DIR = $(CC_PREFIX)/lib
	CC_PARAM = -m32
endif
ifeq ($(TARGET_SYSTEM),x86_64)
	CC_PREFIX = /opt/crosstool/gcc-4.0.2-glibc-2.3.6/x86_64-unknown-linux-gnu
	CC_TOOLS_PREFIX = $(CC_PREFIX)/bin/x86_64-unknown-linux-gnu-
	CC_INC_DIR = $(CC_PREFIX)/include
	CC_LIB_DIR = $(CC_PREFIX)/lib
	CC_EXTRA_LIB_DIR = $(CC_PREFIX)/x86_64-unknown-linux-gnu/lib64
	CC_PARAM = -m64
endif

CC = $(CC_TOOLS_PREFIX)gcc
CXX = $(CC_TOOLS_PREFIX)g++
LINKER = $(CC_TOOLS_PREFIX)g++
ifeq ($(LINK_TYPE),c)
	LINKER = $(CC_TOOLS_PREFIX)gcc
endif
STRIP = $(CC_TOOLS_PREFIX)strip
AR = $(CC_TOOLS_PREFIX)ar

#################################################
# General configuration				#
# 						#
# This section defines some general variables	#
# used for building linux projects.		#
#################################################

MACROS += LINUX VER_MAJOR=$(VER_MAJOR) VER_MINOR=$(VER_MINOR) VER_UPDATE=$(VER_UPDATE)

ifeq ($(BUILD_TYPE),release)
	LDPARAM += -s -Wl,-export-dynamic
	CCPARAM += -fPIC -Wall -O3
	MACROS += NDEBUG PIC
endif
ifeq ($(BUILD_TYPE),debug)
	LDPARAM += -Wl,-export-dynamic
	CCPARAM += -fPIC -Wall -ggdb3
	MACROS += _DEBUG PIC
endif

SO_BASENAME = lib$(TARGET).so
SO_NAME = $(SO_BASENAME).$(VER_MAJOR)
SO_LIBNAME = $(SO_NAME).$(VER_MINOR).$(VER_UPDATE)

A_BASENAME = lib$(TARGET).a
A_NAME = $(A_BASENAME).$(VER_MAJOR)
A_LIBNAME = $(A_NAME).$(VER_MINOR).$(VER_UPDATE)

STORE = .make-$(BUILD_TYPE)/$(TARGET_SYSTEM)

#################################################
# Sourcefile detection				#
# 						#
# This sections ins used to detect the source	#
# files needed for the build			#
#################################################

CPPSOURCES := $(foreach DIR,$(SOURCE_DIRS),$(wildcard $(DIR)/*.cpp))
CPPSOURCES := $(filter-out $(IGNORE_FILES),$(CPPSOURCES))

CSOURCES := $(foreach DIR,$(SOURCE_DIRS),$(wildcard $(DIR)/*.c))
CSOURCES := $(filter-out $(IGNORE_FILES),$(CSOURCES))

CPPOBJECTS := $(addprefix $(STORE)/,$(CPPSOURCES:.cpp=.cpp.o))
COBJECTS := $(addprefix $(STORE)/,$(CSOURCES:.c=.c.o))
OBJECTS = $(CPPOBJECTS:.cpp.o=.o) $(COBJECTS:.c.o=.o)

CPPDFILES := $(addprefix $(STORE)/,$(CPPSOURCES:.cpp=.cpp.d))
CDFILES := $(addprefix $(STORE)/,$(CSOURCES:.c=.c.d))

#################################################
# Make rules					#
#################################################

.PHONY: clean dirs

all: $(TARGET)

$(TARGET): $(TARGET)-shared
	@mv lib$(TARGET)* $(OUTPUT_DIR)

strip: $(TARGET)-stripped

$(TARGET)-stripped: $(TARGET)
	@$(STRIP) $(OUTPUT_DIR)/$(SO_LIBNAME)

$(TARGET)-shared: dirs $(COBJECTS) $(CPPOBJECTS)
	@echo Linking $(TARGET).
	@$(LINKER) -shared $(CCPARAM) $(LDPARAM) $(OBJECTS) -lc -Wl,-soname,$(SO_NAME) -o $(SO_LIBNAME) \
	$(foreach LIBDIR,$(CC_LIB_DIR),-L$(LIBDIR)) \
	$(foreach LIBDIR,$(CC_EXTRA_LIB_DIR),-L$(LIBDIR)) \
	$(foreach LIBDIR,$(TARGET_LIB_PATH),-L$(CC_LIB_DIR)/$(LIBDIR)) \
	$(foreach LIBDIR,$(LIB_PATH),-L$(LIBDIR)) \
	$(foreach LIB,$(SHARED_LIBS),-l$(LIB)) \
	$(foreach LIB,$(TARGET_STATIC_LIBS),$(CC_LIB_DIR)/$(LIB)) \
	$(STATIC_LIBS) \
	$(EXTRA_LIBS)
	@ln -s -f $(SO_LIBNAME) $(SO_NAME)
	@ln -s -f $(SO_NAME) $(SO_BASENAME)

#$(TARGET)-static: dirs $(COBJECTS) $(CPPOBJECTS)
#	@echo Creating static library
#	@$(AR) rcs $(A_LIBNAME) $(OBJECTS)
#	@$(foreach LIB,$(TARGET_STATIC_LIBS), ar x $(CC_LIB_DIR)/$(LIB);)
#	@$(foreach LIB,$(STATIC_LIBS), ar x $(LIB);)
#	@if [ `ls | grep [[:punct:]]o$$ | wc -l` -gt 0 ]; then $(AR) rs $(A_LIBNAME) *.o; fi
#	@rm -f *.o
#	@ln -s -f $(A_LIBNAME) $(A_NAME);
#	@ln -s -f $(A_NAME) $(A_BASENAME);

$(STORE)/%.cpp.o: %.cpp
	@echo Creating object file for $*.cpp
	@$(CXX) -Wp,-MMD,$(STORE)/$*.cpp.dd $(CCPARAM) \
	-I$(CC_INC_DIR) \
	$(foreach INC,$(TARGET_INC_PATH),-I$(CC_INC_DIR)/$(INC)) \
	$(foreach INC,$(INC_PATH),-I$(INC)) \
	$(foreach MACRO,$(MACROS),-D$(MACRO)) \
	$(EXTRA_CFLAGS) \
	-c $< -o $(@:.cpp.o=.o)
	@ln -s -f $(notdir $*.o) $(STORE)/$*.cpp.o
	@sed -e '1s/^\(.*\)$$/$(subst /,\/,$(dir $@))\1/' $(STORE)/$*.cpp.dd > $(STORE)/$*.cpp.ddd
	@sed -e 's/^\($(subst /,\/,$(dir $@))\)$(notdir $*)\.o\(.*\)$$/\1$(notdir $*).cpp.o\2/' $(STORE)/$*.cpp.ddd > $(STORE)/$*.cpp.d
	@rm -f $(STORE)/$*.cpp.dd
	@rm -r $(STORE)/$*.cpp.ddd

$(STORE)/%.c.o: %.c
	@echo Creating object file for $*.c
	@$(CC) -Wp,-MMD,$(STORE)/$*.c.dd $(CCPARAM) \
	-I$(CC_INC_DIR) \
	$(foreach INC,$(TARGET_INC_PATH),-I$(CC_INC_DIR)/$(INC)) \
	$(foreach INC,$(INC_PATH),-I$(INC)) \
	$(foreach MACRO,$(MACROS),-D$(MACRO)) \
	$(EXTRA_CFLAGS) \
	-c $< -o $(@:.c.o=.o)
	@ln -s -f $(notdir $*.o) $(STORE)/$*.c.o
	@sed -e '1s/^\(.*\)$$/$(subst /,\/,$(dir $@))\1/' $(STORE)/$*.c.dd > $(STORE)/$*.c.ddd
	@sed -e 's/^\($(subst /,\/,$(dir $@))\)$(notdir $*)\.o\(.*\)$$/\1$(notdir $*).c.o\2/' $(STORE)/$*.c.ddd > $(STORE)/$*.c.d
	@rm -f $(STORE)/$*.c.dd
	@rm -r $(STORE)/$*.c.ddd

# Empty rule to prevent problems when a header is deleted
%.h: ;

clean:
	@echo Making clean.
	@$(foreach DIR,$(SOURCE_DIRS), rm -rf $(STORE)/$(DIR)/*;)
	@-rm -rf $(OUTPUT_DIR)/lib$(TARGET)*

rebuild: clean all

dirs:
	@-if [ ! -e $(STORE) ]; then mkdir -p $(STORE); fi;
	@-if [ ! -e $(OUTPUT_DIR) ]; then mkdir -p $(OUTPUT_DIR); fi;
	@-$(foreach DIR,$(SOURCE_DIRS), if [ ! -e $(STORE)/$(DIR) ]; then mkdir -p $(STORE)/$(DIR); fi; )

#################################################
# Dependencies					#
#################################################

-include $(CPPDFILES)
-include $(CDFILES)
